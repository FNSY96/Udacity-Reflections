When would you want to use a remote repository rather than keeping all your work
local?

    When I need to access my data from another computer or when I work on a
    project with another developers who need to push and pull files on the
    same repo.
    Also, it is useful to backup the files.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    This might be useful in certain cases, for example: if I was working on a
    project with other developers, any unexpected pull request may affect the
    code I'm working on at that moment.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    - forking is like cloning that github does for you on their machines
    - forks refer (link back to the original repo they were forked from)
    - branches happen on single repo
    - cloning copies the the repo from remote to local or local to local

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It will help to identify whether the local branch is ahead or behind it,
    also, it may help in merging both local branch and remote stored locally to
    solve a conflict.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would rather use another platform from the earlier discussed platforms.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    On working in a collaborative project which need approval of another
    contributors or when trying to avoid having a broken master.
    The first guarantees the harmony of the development process and reduces the
    chance to have buggy master tip.
    The second is easier to deal with as it has no pull-requests and approvals
    and such things!

================================================================================
1. git credential-osxkeychain
    // to test if osxkeychain helper is installed on the device
2. git config --global credential.helper osxkeychain
    // to enable the auto completion for passwords on macOS through keychain
    (password caching)
3. git remote (with no args)
    // shows the remotes I am having on a certain repo
4. git remote add "name" link
    // creates a new name (refers to the repo specified in the link)
5. git remote -v (verbose)
    // returns detailed info about the remote
6. git push "remote name" "branch name"
    // will push the branch to the remote repo with its name (branch's name)
7. git pull "remote name" "branch name"
    // pulls any new commits on the branch to the local device
8. git fetch
    // updates the local copy of the remote branch, where it creates a branch at
    point of conflict
================================================================================
- cloning a repo sets an automatic remote (origin) on the local device
- git pull = git fetch origin + git merge origin(local master branch) master(online master branch)
- git stores local copies of all the remote branches, this contains the state of
the remote at the last time you pushed or pulled the branch
- git status is comparing master to your local copy: origin/master
- Notice that you have 2 references:
  1. origin/master which is the local ref. to the master branch in the remote
  repository.
  2. master which is the local branch (master).
- Fast-Forward merge: When merging an ancestor (a) to a certain commit (b) of
                      the branch we only move the reference of the ancestor (a) to that
                      commit (b) with no need for a true merging.
                      * There is a way to get from b to a
                      * Even when the merge is a fast-forward merge,
                        GitHub still creates this commit.
- pull request = merge request
- Committing a change actually doesn't remove it from the staging area. Instead,
 the staging area and the latest commit will contain the same state until you
 add more changes to the staging area.
- pushing the branch automatically updates the pull request
- In collaborative environment it is preferable to update "master" through
  pull requests
